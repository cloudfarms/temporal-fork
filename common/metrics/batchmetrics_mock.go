// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: batchmetrics.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../LICENSE -package metrics -source batchmetrics.go -destination batchmetrics_mock.go
//

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockBatchMetricsHandler is a mock of BatchMetricsHandler interface.
type MockBatchMetricsHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBatchMetricsHandlerMockRecorder
}

// MockBatchMetricsHandlerMockRecorder is the mock recorder for MockBatchMetricsHandler.
type MockBatchMetricsHandlerMockRecorder struct {
	mock *MockBatchMetricsHandler
}

// NewMockBatchMetricsHandler creates a new mock instance.
func NewMockBatchMetricsHandler(ctrl *gomock.Controller) *MockBatchMetricsHandler {
	mock := &MockBatchMetricsHandler{ctrl: ctrl}
	mock.recorder = &MockBatchMetricsHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchMetricsHandler) EXPECT() *MockBatchMetricsHandlerMockRecorder {
	return m.recorder
}

// CreateBatch mocks base method.
func (m *MockBatchMetricsHandler) CreateBatch(arg0 string, arg1 ...Tag) BatchMetric {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBatch", varargs...)
	ret0, _ := ret[0].(BatchMetric)
	return ret0
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockBatchMetricsHandlerMockRecorder) CreateBatch(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockBatchMetricsHandler)(nil).CreateBatch), varargs...)
}

// MockBatchMetric is a mock of BatchMetric interface.
type MockBatchMetric struct {
	ctrl     *gomock.Controller
	recorder *MockBatchMetricMockRecorder
}

// MockBatchMetricMockRecorder is the mock recorder for MockBatchMetric.
type MockBatchMetricMockRecorder struct {
	mock *MockBatchMetric
}

// NewMockBatchMetric creates a new mock instance.
func NewMockBatchMetric(ctrl *gomock.Controller) *MockBatchMetric {
	mock := &MockBatchMetric{ctrl: ctrl}
	mock.recorder = &MockBatchMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchMetric) EXPECT() *MockBatchMetricMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *MockBatchMetric) Emit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit")
}

// Emit indicates an expected call of Emit.
func (mr *MockBatchMetricMockRecorder) Emit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockBatchMetric)(nil).Emit))
}

// WithCounter mocks base method.
func (m *MockBatchMetric) WithCounter(arg0 counterDefinition, arg1 int64) BatchMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCounter", arg0, arg1)
	ret0, _ := ret[0].(BatchMetric)
	return ret0
}

// WithCounter indicates an expected call of WithCounter.
func (mr *MockBatchMetricMockRecorder) WithCounter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCounter", reflect.TypeOf((*MockBatchMetric)(nil).WithCounter), arg0, arg1)
}

// WithGauge mocks base method.
func (m *MockBatchMetric) WithGauge(arg0 gaugeDefinition, arg1 float64) BatchMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithGauge", arg0, arg1)
	ret0, _ := ret[0].(BatchMetric)
	return ret0
}

// WithGauge indicates an expected call of WithGauge.
func (mr *MockBatchMetricMockRecorder) WithGauge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithGauge", reflect.TypeOf((*MockBatchMetric)(nil).WithGauge), arg0, arg1)
}

// WithHistogram mocks base method.
func (m *MockBatchMetric) WithHistogram(arg0 histogramDefinition, arg1 int64) BatchMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithHistogram", arg0, arg1)
	ret0, _ := ret[0].(BatchMetric)
	return ret0
}

// WithHistogram indicates an expected call of WithHistogram.
func (mr *MockBatchMetricMockRecorder) WithHistogram(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithHistogram", reflect.TypeOf((*MockBatchMetric)(nil).WithHistogram), arg0, arg1)
}

// WithTimer mocks base method.
func (m *MockBatchMetric) WithTimer(arg0 timerDefinition, arg1 time.Duration) BatchMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTimer", arg0, arg1)
	ret0, _ := ret[0].(BatchMetric)
	return ret0
}

// WithTimer indicates an expected call of WithTimer.
func (mr *MockBatchMetricMockRecorder) WithTimer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTimer", reflect.TypeOf((*MockBatchMetric)(nil).WithTimer), arg0, arg1)
}
