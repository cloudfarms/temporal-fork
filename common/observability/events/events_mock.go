// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: events.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../LICENSE -package events -source events.go -destination events_mock.go
//

// Package events is a generated GoMock package.
package events

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventBuilder is a mock of EventBuilder interface.
type MockEventBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockEventBuilderMockRecorder
}

// MockEventBuilderMockRecorder is the mock recorder for MockEventBuilder.
type MockEventBuilderMockRecorder struct {
	mock *MockEventBuilder
}

// NewMockEventBuilder creates a new mock instance.
func NewMockEventBuilder(ctrl *gomock.Controller) *MockEventBuilder {
	mock := &MockEventBuilder{ctrl: ctrl}
	mock.recorder = &MockEventBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBuilder) EXPECT() *MockEventBuilderMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *MockEventBuilder) Emit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Emit")
}

// Emit indicates an expected call of Emit.
func (mr *MockEventBuilderMockRecorder) Emit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockEventBuilder)(nil).Emit))
}

// WithFloat mocks base method.
func (m *MockEventBuilder) WithFloat(arg0 string, arg1 float64) EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFloat", arg0, arg1)
	ret0, _ := ret[0].(EventBuilder)
	return ret0
}

// WithFloat indicates an expected call of WithFloat.
func (mr *MockEventBuilderMockRecorder) WithFloat(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFloat", reflect.TypeOf((*MockEventBuilder)(nil).WithFloat), arg0, arg1)
}

// WithInt mocks base method.
func (m *MockEventBuilder) WithInt(arg0 string, arg1 int64) EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt", arg0, arg1)
	ret0, _ := ret[0].(EventBuilder)
	return ret0
}

// WithInt indicates an expected call of WithInt.
func (mr *MockEventBuilderMockRecorder) WithInt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt", reflect.TypeOf((*MockEventBuilder)(nil).WithInt), arg0, arg1)
}

// WithString mocks base method.
func (m *MockEventBuilder) WithString(arg0, arg1 string) EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithString", arg0, arg1)
	ret0, _ := ret[0].(EventBuilder)
	return ret0
}

// WithString indicates an expected call of WithString.
func (mr *MockEventBuilderMockRecorder) WithString(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithString", reflect.TypeOf((*MockEventBuilder)(nil).WithString), arg0, arg1)
}

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventHandler) CreateEvent(arg0 string) EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0)
	ret0, _ := ret[0].(EventBuilder)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventHandlerMockRecorder) CreateEvent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventHandler)(nil).CreateEvent), arg0)
}
